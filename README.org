:PROPERTIES:
:ID:       42184ff3-99d6-45f0-975a-48c21800a24f
:END:
[[https://github.com/materialsproject/atomate2/actions?query=workflow%3Atesting][https://img.shields.io/github/workflow/status/materialsproject/atomate2/testing?label=tests]]
[[https://codecov.io/gh/materialsproject/atomate2][https://img.shields.io/codecov/c/gh/materialsproject/atomate2]]
[[https://pypi.org/project/atomate2][https://img.shields.io/pypi/v/atomate2?color=blue]]
[[https://img.shields.io/pypi/pyversions/atomate2]]

#+TITLE: atomate2

*ðŸ‘‰ [[https://materialsproject.github.io/atomate2/][Full Documentation]] ðŸ‘ˆ*

* Overview
Atomate2 is a free, open-source software for performing complex
materials science workflows using simple Python functions. Features of
atomate2 include

- It is built on open-source libraries:
  [[https://pymatgen.org][pymatgen]],
  [[https://materialsproject.github.io/custodian/][custodian]],
  [[https://materialsproject.github.io/jobflow/][jobflow]], and
  [[https://materialsproject.github.io/fireworks/][FireWorks]].
- A library of "standard" workflows to compute a wide variety of desired
  materials properties.
- The ability scale from a single material, to 100 materials, or 100,000
  materials.
- Easy routes to modifying and chaining workflows together.
- It can build large databases of output properties that you can query,
  analyze, and share in a systematic way.
- It automatically keeps meticulous records of jobs, their directories,
  runtime parameters, and more.

*Note*: Atomate2 is primarily built to work with the
[[https://www.vasp.at][VASP]] electronic structure software, but we are
actively working on adding more codes.

* Workflows
:PROPERTIES:
:CUSTOM_ID: workflows
:END:
Some of the workflows available in atomate2 are:

- electronic band structures
- elastic, dielectric, and piezoelectric tensors
- one-shot electron-phonon interactions
- electronic transport using
  [[https://hackingmaterials.lbl.gov/amset/][AMSET]]

It is easy to customize and compose any of the above workflows.

* Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
See [[https://materialsproject.github.io/atomate2/user/install.html][installation]] at the documentation site for basic installation
instructions.
** users
Atomate2 is a Python 3.8+ library
: pip install atomate2
or
: conda install atomate2
** developers
atomate2 has some conda dependencies. To ensure reproducibility of
builds, development is performed within a conda virtual environment.

To ensure contributors maintain the package's reproducibility read the
following instructions carefully.
*** installation
a2.lock is to be used for generating the atomate virtual environment.

: git clone https://github.com/PanayotisManganaris/atomate2.git
: cd atomate2
: conda create -p/depot/<PI_username>/apps/conda/envs/a2
: conda activate a2
: conda env update -f a2.yaml

Here path is specified for a group-wide depot installation.
*** modifying environment

** TODO put these extras into the spec
- phonons = ["phonopy>=1.10.8", "seekpath"]
- mp = ["mp-api>=0.27.5"]
- amset = ["amset>=0.4.15", "pydash"]
- cclib = ["cclib"]

classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Information Technology",
    "Operating System :: OS Independent",
    "Topic :: Other/Nonlisted Topic",
    "Topic :: Scientific/Engineering",
]

docs = [
    "numpydoc==1.5.0",
    "ipython==8.6.0",
    "FireWorks==2.0.3",
    "autodoc_pydantic==1.8.0",
    "jupyter-book==0.13.1",
]

dev = ["pre-commit>=2.12.1"]

[project.scripts]
atm = "atomate2.cli:cli"

[project.urls]
homepage = "https://materialsproject.github.io/atomate2/"
repository = "https://github.com/hackingmaterials/atomate2"
documentation = "https://materialsproject.github.io/atomate2/"
changelog = "https://github.com/hackingmaterials/atomate2/blob/main/CHANGELOG.md"

[tool.setuptools.package-data]
atomate2 = ["py.typed"]
"atomate2.vasp.sets" = ["*.yaml"]
"atomate2.vasp.schemas.calc_types" = ["*.yaml"]

[tool.flake8]
max-line-length = 88
max-doc-length = 88
select = "C, E, F, W, B, B950"
extend-ignore = "E203, W503, E501, F401, RST21"
min-python-version = "3.8.0"
docstring-convention = "numpy"
rst-roles = "class, func, ref, obj"

[tool.mypy]
ignore_missing_imports = true
no_strict_optional = true

[tool.pytest.ini_options]
filterwarnings = [
    "ignore:.*POTCAR.*:UserWarning",
    "ignore:.*magmom.*:UserWarning",
    "ignore:.*is not gzipped.*:UserWarning",
    "ignore:.*input structure.*:UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
include = ["src/*"]
parallel = true
branch = true

[tool.coverage.paths]
source = ["src/"]

[tool.coverage.report]
skip_covered = true
show_missing = true
exclude_lines = [
    '^\s*assert False(,|$)',
    'if typing.TYPE_CHECKING:',
    '^\s*@overload( |$)',
]

* Quick start
:PROPERTIES:
:CUSTOM_ID: quick-start
:END:
Workflows in atomate2 are written using the
[[https://materialsproject.github.io/jobflow/][jobflow]] library.
Workflows are generated using =Maker= objects which have a consistent
API for modifying input settings and chaining workflows together. Below,
we demonstrate how to run a band structure workflow (see the
[[https://materialsproject.github.io/atomate2/user/codes/vasp.html#relax-and-band-structure][documentation]]
for more details). In total, 4 VASP calculations will be performed:

1. A structural optimisation.
2. A self-consistent static calculation on the relaxed geometry.
3. A non-self-consistent calculation on a uniform k-point mesh (for the
   density of states).
4. A non-self-consistent calculation on a high symmetry k-point path
   (for the line mode band structure).

#+begin_src python
from atomate2.vasp.flows.core import RelaxBandStructureMaker
from jobflow import run_locally
from pymatgen.core import Structure

# construct a rock salt MgO structure
mgo_structure = Structure(
    lattice=[[0, 2.13, 2.13], [2.13, 0, 2.13], [2.13, 2.13, 0]],
    species=["Mg", "O"],
    coords=[[0, 0, 0], [0.5, 0.5, 0.5]],
)

# make a band structure flow to optimise the structure and obtain the band structure
bandstructure_flow = RelaxBandStructureMaker().make(mgo_structure)

# run the flow
run_locally(bandstructure_flow, create_folders=True)
#+end_src

Before the above code can run successfully, you'll need to

- tell pymatgen where to
  [[https://pymatgen.org/installation.html#potcar-setup][find your pseudopotential files]]
- tell atomate2 where to find your VASP binary
- (optionally) prepare an external database to store the job output

In this example, we execute the workflow immediately. In many cases, you
might want to perform calculations on several materials simultaneously.
To achieve this, all atomate2 workflows can be run using the
[[https://materialsproject.github.io/fireworks/][FireWorks]] software.
See the
[[https://materialsproject.github.io/atomate2/user/fireworks.html][documentation]]
for more details.

* Tutorials
:PROPERTIES:
:CUSTOM_ID: tutorials
:END:
The documentation includes comprehensive tutorials and reference
information to get you started:

- [[https://materialsproject.github.io/atomate2/user/running-workflows.html][Introduction
  to running workflows]]
- [[https://materialsproject.github.io/atomate2/user/fireworks.html][Using
  atomate2 with FireWorks]]
- [[https://materialsproject.github.io/atomate2/user/codes/vasp.html][List
  of VASP workflows]]

* Need help?
:PROPERTIES:
:CUSTOM_ID: need-help
:END:
Ask questions about atomate2 on the
[[https://matsci.org/c/atomate][atomate2 support forum]]. If you've
found an issue with atomate2, please submit a bug report on
[[https://github.com/materialsproject/atomate2/issues][GitHub Issues]].

* What's new?
:PROPERTIES:
:CUSTOM_ID: whats-new
:END:
Track changes to atomate2 through the
[[https://materialsproject.github.io/atomate2/about/changelog.html][changelog]].

* Contributing
:PROPERTIES:
:CUSTOM_ID: contributing
:END:
We greatly appreciate any contributions in the form of a pull request.
Additional information on contributing to atomate2 can be found
[[https://materialsproject.github.io/atomate2/about/contributing.html][here]].
We maintain a list of all contributors
[[https://materialsproject.github.io/atomate2/about/contributors.html][here]].

* License
:PROPERTIES:
:CUSTOM_ID: license
:END:
Atomate2 is released under a modified BSD license; the full text can be
found
[[https://raw.githubusercontent.com/materialsproject/atomate2/main/LICENSE][here]].

* Acknowledgements
:PROPERTIES:
:CUSTOM_ID: acknowledgements
:END:
Atomate2 was designed and developed by Alex Ganose.

A full list of all contributors can be found
[[https://materialsproject.github.io/atomate2/about/contributors.html][here]].
